// Define the datasource to connect to your PostgreSQL database
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // This will pull the DATABASE_URL from your .env file
}

// Generator for Prisma Client
generator client {
  provider = "prisma-client-js"
   output   = "./node_modules/@prisma/client"
}

// The User model
model User {
  id         Int      @id @default(autoincrement()) // Primary key
  email      String   @unique                      // Unique email
  name       String?                               // Optional name
  password   String                                // Hashed password
  posts      Post[]                                // One-to-many relation to Post
  likes      Like[]                                // One-to-many relation to Like
  following  Follow[] @relation("Follower")        // One-to-many relation to Follow (follower)
  followers  Follow[] @relation("Following")       // One-to-many relation to Follow (following)
}

// The Post model
model Post {
  id        Int     @id @default(autoincrement())  // Primary key
  content   String                                 // Post content
  userId    Int                                    // Foreign key to User
  user      User    @relation(fields: [userId], references: [id])  // Many-to-one relation to User
  likes     Like[]                                 // One-to-many relation to Like
  createdAt DateTime @default(now())               // Timestamp
}

// The Follow model (for relationships between users: who follows whom)
model Follow {
  id           Int  @id @default(autoincrement()) // Primary key
  followerId   Int                                // Foreign key to User (follower)
  followingId  Int                                // Foreign key to User (following)
  follower     User @relation("Follower", fields: [followerId], references: [id])   // Many-to-one relation to User (follower)
  following    User @relation("Following", fields: [followingId], references: [id]) // Many-to-one relation to User (following)

  @@unique([followerId, followingId]) // Prevent duplicate follows
}

// The Like model (for users liking posts)
model Like {
  id      Int  @id @default(autoincrement()) // Primary key
  postId  Int                                // Foreign key to Post
  userId  Int                                // Foreign key to User
  post    Post @relation(fields: [postId], references: [id]) // Many-to-one relation to Post
  user    User @relation(fields: [userId], references: [id]) // Many-to-one relation to User

  @@unique([postId, userId]) // Prevent a user from liking the same post twice
}